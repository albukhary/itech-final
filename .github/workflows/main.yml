name: Apply configuration

on:
  push:
    branches:
      - main

env:
  BACKEND_DYNAMO_TABLE_NAME: itech-final-tfstate-lock
  BACKEND_S3_BUCKET_NAME: itech-final-state

jobs:
  create-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Install aws-cli
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli --upgrade
      
    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set default.region us-east-1

    - uses: actions/checkout@v2
      
    - name: Check if DynamoDB table exists
      id: check-dynamodb-table
      run: |
        if aws dynamodb describe-table --table-name ${{ env.BACKEND_DYNAMO_TABLE_NAME }} 2>/dev/null; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
      shell: bash
      
    - name: Create DynamoDB table
      run: |
        aws dynamodb create-table \
          --table-name ${{ env.BACKEND_DYNAMO_TABLE_NAME }} \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST
      if: steps.check-dynamodb-table.outputs.exists == 'false'

    - name: Check if S3 bucket exists
      id: check-s3-bucket
      run: |
        if aws s3api head-bucket --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} 2>/dev/null; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi
      shell: bash
      
    - name: Create S3 bucket
      run: |
        aws s3api create-bucket --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} --region us-east-1 --create-bucket-configuration LocationConstraint=us-east-1
#        aws s3api put-bucket-versioning --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} --versioning-configuration Status=Enabled
      if: steps.check-s3-bucket.outputs.exists == 'false'

    - name: Configure S3 bucket public access block
      run: |
        aws s3api put-public-access-block \
          --bucket ${{ env.BACKEND_S3_BUCKET_NAME }} \
          --public-access-block-configuration \
            "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
  lint-vpc:
    name: Lint VPC
    needs: [create-backend]
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.9

    - name: Run terraform fmt check
      working-directory: ./us-east-1/vpc
      run: terraform fmt -check -diff -recursive

  tf_plan_apply_vpc:
    name: Deploy VPC to AWS
    needs: [lint-vpc]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.9

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Initialize Terraform
      working-directory: ./us-east-1/vpc
      run: terraform init -input=false          

    - name: Plan Terraform
      id: plan
      continue-on-error: true
      working-directory: ./us-east-1/vpc
      run: |
        terraform plan -input=false -no-color -out=tfplan \
        && terraform show -no-color tfplan          

    - name: Apply Terraform
      if: steps.plan.outcome == 'success'
      id: apply
      continue-on-error: true
      working-directory: ./terraform
      run: |
        terraform apply \
          -input=false \
          -no-color \
          tfplan
  # Here we deal with compute module
  lint-compute:
    name: Lint Compute
    needs: [tf_plan_apply_vpc]
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.9

    - name: Run terraform fmt check
      working-directory: ./us-east-1/compute
      run: terraform fmt -check -diff -recursive

  tf_plan_apply_compute:
    name: Deploy Compute to AWS
    needs: [lint-compute]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.9

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Initialize Terraform
      working-directory: ./us-east-1/compute
      run: terraform init -input=false          

    - name: Plan Terraform
      id: plan
      continue-on-error: true
      working-directory: ./us-east-1/compute
      run: |
        terraform plan -input=false -no-color -out=tfplan \
        && terraform show -no-color tfplan          

    - name: Apply Terraform
      if: steps.plan.outcome == 'success'
      id: apply
      continue-on-error: true
      working-directory: ./terraform
      run: |
        terraform apply \
          -input=false \
          -no-color \
          tfplan
